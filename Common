package org.flipkart.utils;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.io.FileHandler;

public class Common {
	
	protected static WebDriver driver= null;
	
	public static synchronized WebDriver browserlaunch (String browser) {
	switch (browser) {
	case "chrome":
		if (driver!=null) {
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\umapathy\\eclipse-workspace\\BaseClass\\Driver\\chromedriver.exe");
			return driver;
		}else {
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\umapathy\\eclipse-workspace\\BaseClass\\Driver\\chromedriver.exe");
		driver=new ChromeDriver();
		}
		break;
	case "firefox":
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\umapathy\\eclipse-workspace\\BaseClass\\Driver\\chromedriver.exe");
		 driver=new ChromeDriver();
		break;
	default:
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\umapathy\\eclipse-workspace\\BaseClass\\Driver\\chromedriver.exe");
		driver=new ChromeDriver();
		break;
	}
	return driver;
	}


public static void browserMax() {
	driver.manage().window().maximize();
}
public static void loadURL(String url) {
	driver.get(url);
}

public static WebElement element(String xpath) {
WebElement findelement=driver.findElement(By.xpath(xpath));
return findelement;
}


public static void type(WebElement element, String data) {
	element.sendKeys(data);
}

public static WebElement  element(By name) {
	 return driver.findElement(name);
}

public static WebElement  element_click(By name) {
	 return driver.findElement(name);
}

public static String takeScreenshotAtEndOfTest() throws IOException {
    String dateName = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
    TakesScreenshot ts = (TakesScreenshot)driver;
    File source = ts.getScreenshotAs(OutputType.FILE);
    String destination = System.getProperty("user.dir") + "/Extendsreport/" +  dateName
            + ".png";
    File finalDestination = new File(destination);
    FileHandler.copy(source, finalDestination);
    return destination;
}


}
---------------------------------------------------------------------------------
package org.flipkart.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelUtil {
	public static String getdata(int rownum, int cellnum) throws IOException {
		File f=new File("C:\\Users\\umapathy\\eclipse-workspace\\BaseClass\\Excel\\New Practice.xlsx");
		String stringCellValue=null;
		try {
			FileInputStream fi=new FileInputStream(f);
			Workbook wb=new XSSFWorkbook(fi);
			Sheet sh=wb.getSheet("Sheet1");
			Row row=sh.getRow(rownum);
			Cell cell = row.getCell(cellnum);
			 stringCellValue = cell.getStringCellValue();
				FileOutputStream fo = new FileOutputStream(f);
				wb.write(fo);
				wb.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return stringCellValue;
	}

	
	public static String[][] dataexcel(){
		File f=new File("C:\\Users\\umapathy\\eclipse-workspace\\TestNGTest\\Excel\\New Practice.xlsx");
		
		String[][]  data=null;
		try {
			FileInputStream fi=new FileInputStream(f);
			Workbook wb=new XSSFWorkbook(fi);
			Sheet sh=wb.getSheet("Sheet1");
			int physicalNumberOfRows = sh.getPhysicalNumberOfRows();
			Row r = sh.getRow(physicalNumberOfRows);
			int physicalNumberOfCells = r.getPhysicalNumberOfCells();
			data =new String[physicalNumberOfRows][physicalNumberOfCells];
			for (int i = 0; i < physicalNumberOfRows; i++) {
				for (int j = 0; j < physicalNumberOfCells; j++) {
					Row row = sh.getRow(i);
					
						Cell cell = row.getCell(j);
						String cellvalue =cell.getStringCellValue();
						data[i][j]=cellvalue;
					}
				
				}
			}
		
	
		
	
		catch (Exception e) {
			// TODO: handle exception
			System.out.println("error may occcur when u define a name called vedha");
		}
		return data;
	
}
	
}
-----------------------------------------------------------------------------
package org.flipkart.utils;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.testng.IAnnotationTransformer;
import org.testng.annotations.ITestAnnotation;

public class ExecuteAll implements IAnnotationTransformer{

	@Override
	public void transform(ITestAnnotation arg0, Class arg1, Constructor arg2, Method arg3) {
		// TODO Auto-generated method stub
		arg0.setRetryAnalyzer(RetryAnalyser.class);
	}
}
---------------------------------------------------------------------------
package org.flipkart.utils;

import java.io.IOException;

import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.ChartLocation;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ReportClass extends Common{
	
	//builds a new report using the html template 
    ExtentHtmlReporter htmlReporter;
    
    ExtentReports extent;
    //helps to generate the logs in test report.
    ExtentTest test;
	
@BeforeTest
public void report() {
	// initialize the HtmlReporter
	htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") +"/Extendsreport/reportextends.html");
	
	  //initialize ExtentReports and attach the HtmlReporter
    extent = new ExtentReports();
    extent.attachReporter(htmlReporter);
    
    //configuration items to change the look and feel
    //add content, manage tests etc
    htmlReporter.config().setChartVisibilityOnOpen(true);
    htmlReporter.config().setDocumentTitle("Extent Report Demo");
    htmlReporter.config().setReportName("Test Report");
    htmlReporter.config().setTestViewChartLocation(ChartLocation.TOP);
    htmlReporter.config().setTheme(Theme.DARK);
    htmlReporter.config().setTimeStampFormat("EEEE, MMMM dd, yyyy, hh:mm a '('zzz')'");
    
}

@Test
public void test_methfail() {
	 test = extent.createTest("test_methfail", "FAILED test case");
	Assert.assertTrue(false);
}


@Test
public void test_methpass() {
	 test = extent.createTest("test_methpass", "PASSED test case");
		Assert.assertTrue(true);
}

@Ignore
@Test
public void test_methskip() {
	 test = extent.createTest("test_methskip", "PASSED test case");
}

@AfterMethod
public void getResult(ITestResult result) throws IOException {
	
    if(result.getStatus() == ITestResult.FAILURE) {
        test.log(Status.FAIL, MarkupHelper.createLabel(result.getName()+" FAILED ", ExtentColor.RED));
        test.fail(result.getThrowable(),MediaEntityBuilder.createScreenCaptureFromPath(takeScreenshotAtEndOfTest()).build());
    }
    else if(result.getStatus() == ITestResult.SUCCESS) {
        test.log(Status.PASS, MarkupHelper.createLabel(result.getName()+" PASSED ", ExtentColor.GREEN));
    }
    else {
        test.log(Status.SKIP, MarkupHelper.createLabel(result.getName()+" SKIPPED ", ExtentColor.ORANGE));
        test.skip(result.getThrowable());
    }
}

@AfterTest
public void tearDown() {
	//to write or update test information to reporter
    extent.flush();
}
}
---------------------------------------------------------------------------
package org.flipkart.utils;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class RetryAnalyser implements IRetryAnalyzer {

	int count=0;
	int retrycount=5;
	@Override
	public boolean retry(ITestResult arg0) {
		// TODO Auto-generated method stub
		if (count<retrycount) {
			count++;
			return true;
			
		}
		return false;
	}

}
---------------------------------------------------------------------------
package org.test.execution;

import org.flipkart.utils.ExcelUtil;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.tets.paefactory.Homepage;

public class HomePageExe extends Homepage {

	
	@Test(groups= {"smoke"})
	public void smoke() {
		System.out.println("my first test");
	}
	
	@Test(groups= {"sanity","smoke"})
	public void sanity() {
		System.out.println("my first test");
	}
	
	@Test(groups= {"regression"}, dataProvider="testdata")
	public void regression(String data, String data2) {
		System.out.println(data);
		System.out.println(data2);
	}

	/*@DataProvider(name ="testdata")
	public String[][] data(){
		return (ExcelUtil.dataexcel());
	}*/

	@DataProvider(name ="testdata", parallel=true)
	public Object[][] data1(){
		return new Object[][] {{"username","password"},{"maha","vedha"}};
	}

}
------------------------------------------------------------------------------
package org.test.execution;

import java.util.Date;

import org.flipkart.utils.RetryAnalyser;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Ignore;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.testng.internal.annotations.DataProviderAnnotation;
import org.tets.paefactory.Homepage;

public class HomePageExe2 extends Homepage {

	@Parameters({"mango","orange"})
	@Test
	public void executeo0(String mango, String orange) {
		Date d = new Date();
		System.out.println(d);
		System.out.println(mango);
		System.out.println(orange);
	}
	
	@Test(groups= {"regression"})
	public void executeo420() {
		Assert.assertTrue(false);
	}
	@Test(groups= {"regression"}, dataProvider = "testdata",dataProviderClass=HomePageExe.class )
	public void regression1(String data, String data2) {
		System.out.println(data);
		System.out.println(data2);
	}
}
--------------------------------------------------------------
package org.tets.paefactory;

import org.flipkart.utils.Common;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class Homepage  extends Common{
	public Homepage() {
		PageFactory.initElements(driver, this);
	}

	@FindBy(id="email")
	private WebElement userName;
	@FindBy(id="pass")
	private WebElement password;
	
	
	public WebElement getUserName() {
		return userName;
	}
	public WebElement getPassword() {
		return password;
	}
	
	
	
}
-----------------------------------------------------

